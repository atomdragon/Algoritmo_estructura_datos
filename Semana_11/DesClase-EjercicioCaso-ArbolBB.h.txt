#ifndef __ARBOLBB_HPP__
#define __ARBOLBB_HPP__

#include <algorithm>
#include <functional>
#include <list>
#include <string>

using namespace std;
using namespace System;

template <typename T>
class Nodo {
public:
	T elemento;
	Nodo* izq;
	Nodo* der;
	Nodo* padre;
};

template <typename T, typename S, typename B>
class ArbolBB {
	typedef function<int(S, S)> Comp; //Lambda

	Nodo<T>* raiz;
	void(*procesar)(T); //Puntero a funcion

	Comp comparar; // lambda de criterio de comparación

	list<string>* lista; // Para el recorrido en PRE-ORDEN

public:
	ArbolBB(void(*otroPunteroAFuncion)(T)) {
		this->procesar = otroPunteroAFuncion;
		//this->comparar = [](S a, S b)->int {return a - b; };
		this->comparar = [](string a, string b)->int {
			return a.compare(b);	//0: Iguales, <0: a<b, >0: a>b
		};
		raiz = nullptr;
		lista = new list<string>();
	}
	//Nodo<T>* getRaiz() { return raiz; }

	bool insertar(T e) {
		return _insertar(raiz, e);
	}
	void enOrden() {
		_enOrden(raiz);
	}
	void preOrden() {
		_preOrden(raiz);
	}
	void postOrden() {
		_postOrden(raiz);
	}
	int cantidad() {
		return _cantidad(raiz);
	}
	int altura() {
		return _altura(raiz);
	}
	bool Buscar(T e) {
		return _buscar(raiz, e);
	}
	Nodo<T>* Obtener(T e)
	{
		return _obtener(raiz, e);
	}

	// Propuesto 1: Elaborar un algoritmo para obtener el nodo cuyo valor es el mínimo del árbol.
	T Minimo() {
		return _minimo(raiz);
	}

	// Propuesto 2: Elaborar un algoritmo para obtener el nodo cuyo valor es el  máximo del árbol.
	T Maximo() {
		return _maximo(raiz);
	}
	bool Eliminar(T e) {
		return _eliminar(raiz, e);
	}

	void imprimeArbol() {
		_imprimeArbol(raiz, "", true);
	}

	void Intervalo_AlumnosNombre(S min, S max) {
		_Intervalo_AlumnosNombre(raiz, min, max);
	}

	void preOrdenToLista() {
		_preOrdenToLista(raiz);
	}

	list<string>* getLista() {
		return lista;
	}


private:
	bool _buscar(Nodo<T>* nodo, T e) {
		if (nodo == nullptr) return false;
		else {
			int r = comparar(nodo->elemento, e);
			if (r == 0) return true;
			else if (r < 0) {
				return _buscar(nodo->der, e);
			}
			else {
				return _buscar(nodo->izq, e);
			}
		}
	}
	Nodo<T>* _obtener(Nodo<T>* nodo, T e) {
		if (nodo == nullptr) return nullptr;
		else {
			int r = comparar(nodo->elemento, e);
			if (r == 0) {
				return nodo;
			}
			else if (r < 0) {
				return _obtener(nodo->der, e);
			}
			else {
				return _obtener(nodo->izq, e);
			}
		}
	}
	bool _insertar(Nodo<T>*& nodo, T e) {
		if (nodo == nullptr) {
			nodo = new Nodo<T>();
			nodo->elemento = e;
			return true;
		}
		else {
			int r = comparar(nodo->elemento, e);
			if (r == 0) return false;
			else if (r < 0) {
				return _insertar(nodo->der, e);
			}
			else {
				return _insertar(nodo->izq, e);
			}
		}
	}
	void _enOrden(Nodo<T>* nodo) {	//Izq => Raiz => Der
		if (nodo == nullptr) return;
		_enOrden(nodo->izq);
		procesar(nodo->elemento);
		_enOrden(nodo->der);
	}

	void _preOrden(Nodo<T>* nodo) {	//Raiz => Izq => Der
		if (nodo == nullptr) return;
		procesar(nodo->elemento);
		_preOrden(nodo->izq);
		_preOrden(nodo->der);
	}

	void _postOrden(Nodo<T>* nodo) {	//Izq => Der => Raiz
		if (nodo == nullptr) return;
		_postOrden(nodo->izq);
		_postOrden(nodo->der);
		procesar(nodo->elemento);
	}

	bool _vacio() {
		return raiz == nullptr;
	}
	int _cantidad(Nodo<T>* nodo) {
		//La cantidad de nodos del árbol es:
		//	0 si es vacío
		//	1 + la cantidad de nodos por la izquierda + la cantidad de nodos por la derecha

		if (nodo == nullptr)
			return 0;
		else
		{
			int ci, cd;
			ci = _cantidad(nodo->izq);
			cd = _cantidad(nodo->der);
			return 1 + ci + cd;
		}

	}
	int _altura(Nodo<T>* nodo) {
		//La altura del árbol es:
		//	0 si es vacío
		//	la mayor de las alturas por la izquierda y por la derecha, las cuáles son 0 si son vacías ó 1 + la altura por la izq(o der) en caso contrario

		if (nodo == nullptr)
			return 0;
		else
		{
			int ai, ad;
			ai = 1 + _altura(nodo->izq);
			ad = 1 + _altura(nodo->der);
			return ai > ad ? ai : ad;
		}
	}

	// Propuesto 1: Elaborar un algoritmo para obtener el nodo cuyo valor es el mínimo del árbol. 
	T _minimo(Nodo<T>* nodo) {	//El mínimo debe estar en la hoja izquierda de menor valor
		if (nodo->izq == nullptr) return nodo->elemento;
		else
			return _minimo(nodo->izq);
	}

	// Propuesto 2: Elaborar un algoritmo para obtener el nodo cuyo valor es el  máximo del árbol.
	T _maximo(Nodo<T>* nodo) {	//El maximo debe estar en la hoja derecha de mayor valor
		if (nodo->der == nullptr) return nodo->elemento;
		else
			return _maximo(nodo->der);
	}

	bool _eliminar(Nodo<T>*& nodo, T e) {
		if (nodo == nullptr) return false;
		//Buscamos el Nodo que contiene el elemento e
		else {
			int r = comparar(nodo->elemento, e);
			if (r < 0) {	//si (nodo->elemento < e)
				return _eliminar(nodo->der, e);
			}
			else if (r > 0) {	//si (nodo->elemento > e)
				return _eliminar(nodo->izq, e);
			}

			//Analizamos el escenario en el que se encuentra el Nodo a eliminar
			else { // r==0 es porque se encontró el elemento e en el arbol	| si (nodo->elemento == e)
				if (nodo->der == nullptr && nodo->izq == nullptr) {	//Caso 1: Hoja
					nodo = nullptr;
					delete nodo;	//*REZC: Sí se puede hacer delete nullptr, porque nullptr es un puntero
					return true;
				}
				else if (nodo->izq == nullptr) { //Caso 2: Izq Vacío y Der No Vacío
					nodo = nodo->der;
					return true;
				}
				else if (nodo->der == nullptr) { //Caso 3: Der Vacío e Izq No Vacío
					nodo = nodo->izq;
					return true;
				}
				else { //Caso 4: Izq y Der No Vacíos
					Nodo<T>* aux = nodo->der; //Se establece buscar el menor elemento por la derecha
					while (aux->izq != nullptr)
					{
						aux = aux->izq; //Se obtiene la hoja menor
					}
					nodo->elemento = aux->elemento; //Se actualiza el elemento en el nodo raiz y
					return _eliminar(nodo->der, aux->elemento); //se envía a eliminar el elemento en el arbol por la derecha
				}
			}
		}
	}

	void _imprimeArbol(Nodo<T>* nodo, S indent, B last) {
		if (nodo != nullptr) {
			cout << indent;
			if (last) {
				cout << "R----";
				indent += "   ";
			}
			else {
				cout << "L----";
				indent += "|  ";
			}
			cout << nodo->elemento << endl;
			_imprimeArbol(nodo->izq, indent, false);
			_imprimeArbol(nodo->der, indent, true);
		}
	}

	void _preOrdenToLista(Nodo<T>* nodo) {	//Raiz => Izq => Der
		if (nodo == nullptr) return;
		//procesar(nodo->elemento);
		lista->push_back(nodo->elemento);
		_preOrdenToLista(nodo->izq);
		_preOrdenToLista(nodo->der);
	}

	bool _Intervalo_AlumnosNombre(Nodo<T>* nodo, T min, T max) {
		if (nodo == nullptr) return false;
		else {
			//if (min < nodo->elemento)
			if (comparar(min, nodo->elemento) < 0)
				_Intervalo_AlumnosNombre(nodo->izq, min, max);
			if (min <= nodo->elemento && nodo->elemento <= max)
				cout << nodo->elemento << "\n";
			//if (max > nodo->elemento)
			if (comparar(max, nodo->elemento) > 0)
				_Intervalo_AlumnosNombre(nodo->der, min, max);
		}
	}

};

#endif

#ifndef __HASHTABLA_H__
#define __HASHTABLA_H__

#include <iostream>
#include <vector>
#include <list>
#include <string>
#include "Entidad.h"

using namespace std;

//typedef unsigned int size_t;

class HashTablaA {
private:
	vector<list<Entidad>> theLists;   // Tabla: vector cuyo cada elemento es una Lista de Nodos Hash(key, value)
	int  currentSize;	//Tamaño del vector

public:
	explicit HashTablaA(int size = 101) : currentSize{ 0 }
	{
		theLists.resize(101);	//Resize al vector, para que tenga 101 elementos: 101 listas de Nodos Hash(key, value)
	}

	void makeEmpty()
	{
		for (auto& thisList : theLists)
			thisList.clear();
	}

	bool insert(Entidad&& x)
	{
		auto& whichList = theLists[myhash_string(x.getKey())]; //Del vector, obtenemos la lista de elementos según el hash(indice) obtenido

		whichList.push_back(x); //Agregamos el nuevo elemento(key, value) a la lista del hash(indice)

		return true;
	}

	void DispAll() {
		int pos = 0;
		for (auto& thisList : theLists) {		// Recorremos el vector<>
			cout << "Key: " + to_string(pos) << " | ";
			for (auto& it : theLists[pos]) {	// Recorremos la Lista de cada indice del vector	
				//cout << it.getKey() << ",";	// Imprime key
				cout << "(" << it.getKey() << ", " << it.getVistas() << ", " << it.getNumVideos() << ", " << it.getAvg() << "); ";	// Imprime (key,value)
			}
			cout << endl;
			pos++;
		}
	}

	//[REZC] Buscar
	void buscar(string key) {

		//auto& whichList = theLists[myhash_string(x.getKey())]; //Del vector, obtenemos la lista de elementos según el hash(indice) obtenido

		int pos = 0;
		pos = myhash_string(key);	//Obtenemos el indice de la Tabla (pos) a partir de la Funcion HASH
		cout << "Key: " + to_string(pos) << " | ";
		for (auto& it : theLists[pos]) {	// Recorremos la Lista de cada indice del vector	
			if (it.getKey() == key)
				cout << "(Artist= " << it.getArtista() << ", Total Views= " << it.getVistas() << ", Avg= " << it.getAvg() << "); ";	// Imprime (key,values)
		}
		cout << endl;
	}


private:

	// ...:: FUNCION HASH ::...

	size_t myhash_int(const int key) const {
		size_t hashVal = key;			//Funcion de Dispersion: k (the same key)
		hashVal %= theLists.size();		//Mapa de Compresion: Aritmetica Modular: F(k) = |k| mod N
		//hashVal = 10; //Prueba para verificar como se almacenan los elementos si obtienen el mismo hash
		return(hashVal);	//retornará el indice obtenido para la Tabla HASH
	}



	// ...:: FUNCION HASH ::...
	/*
	* Suma de Componentes: (Suma del código ascii) % (theLists.size())
	*/
	size_t myhash_string(const string key) const {

		char c;	//caracter de cada cadena
		//int suma = 0;
		size_t hashVal = 0;
		/*
		for (int i = 0; i < key.size(); i++)
		{
			char c = key[i];
			hashVal = hashVal + int(c);
		}
		*/
		for (char ch : key)
			//hashVal += ch;						// Opcion 01
			hashVal = 37 * hashVal + ch;			// Opcion 02

		hashVal = hashVal % theLists.size();

		return(hashVal);	//retornará el indice obtenido para la Tabla HASH
	}
};

#endif // !__HASHTABLA_H__

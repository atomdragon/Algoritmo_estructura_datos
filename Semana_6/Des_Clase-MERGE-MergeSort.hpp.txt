#ifndef __MERGESORT_HPP__
#define __MERGESORT_HPP__
#include "Merge.hpp"

//Algoritmo para DIVIDIR la coleccion y ordenar
//1Â°) DIVIDIR el arreglo en dos partes iguales. Repetir hasta llegar a un arreglo de un solo elmento.

void mergeSort(int* A, int n) {
	if (n > 1) { //Solo para DIVIDIR Arreglos n>1: Condicion para final de recursividad.
		int mitad = n / 2;
		int* A1 = new int[mitad];		//A1: Arreglo de la izquierda
		int* A2 = new int[n - mitad];	//A2: Arreglo de la derecha

		for (int i = 0; i < mitad; i++) {	//Llenamos el arreglo de la izquierda A1
			A1[i] = A[i];
		}
		for (int i = mitad; i < n; i++) {	//Llenamos el arreglo de la derecha A2
			A2[i - mitad] = A[i];
		}
		mergeSort(A1, mitad);		//Recursividad para volver a DIVIDIR el Arreglo A1
		mergeSort(A2, n - mitad);	//Recursividad para volver a DIVIDIR el Arreglo A2
		Merge(A1, A2, A, n);		//MEZCLA las listas(arreglos) divididos, en un arreglo A ordenado
	}
}

#endif

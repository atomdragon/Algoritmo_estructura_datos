#ifndef __BINARYSEARCH_HPP__
#define __BINARYSEARCH_HPP__
#include <vector>

using namespace std;

#define NOT_FOUND -1

//Condicion: Coleccion Ordenada
template<typename Comparable>
class BinarySearch {
public:
	BinarySearch() {}

	int binarySearch(const vector<Comparable>& A, const Comparable x) {
		int low = 0;				//Indice del Arreglo: low
		int high = A.size() - 1;	//Indice del Arreglo: High	
		while (low <= high)			
		{
			int mid = (low + high) / 2; //Indice del Arreglo: Medio
			if (A[mid] < x) {		//A[mid] < Valor Buscado
				low = mid + 1;
			}
			else if (A[mid] > x) {	//A[mid] > Valor Buscado
				high = mid - 1;
			}
			else { //Cuando low=high=mid y A[mid] == Valor Buscado
				return mid;			//Encontro el valor buscado
			}
		}
		return NOT_FOUND;
	}
/*
	int binarySearchMejor(const vector<Comparable>& A, const Comparable x) {
		int low = 0;				// Indices del Arreglo: low
		int high = A.size() - 1;	// Indices del Arreglo: high
		int mid;					//Indice del Arreglo: Medio
		while (low < high) {
			mid = (low + high) / 2;
			if (A[mid] < x) {		//A[mid] < Valor Buscado
				low = mid + 1;
			}
			else {					//A[mid] >= Valor Buscado
				high = mid;
			}
		}
		return (low == high) && A[low] == x ? low : NOT_FOUND;
	}
*/
};

#endif // !__BINARYSEARCH_HPP__


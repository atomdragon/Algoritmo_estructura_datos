#ifndef __QUICKSORT_HPP__
#define __QUICKSORT_HPP__

#include <iostream>

using namespace std;

//Hallará la posición del PIVOTE, para que se queden los elementos MENORES a la IZQUIERDA del PIVOTE y los MAYORES a la DERECHA.
int particion(int* A, int p, int r) {
	int x = A[r];	//el pivote: Ultimo indice de la derecha del arreglo
	int i = p - 1;	//indice de los menores
	for (int j = p; j < r; j++) {
		if (A[j] <= x) {
			i++;
			swap(A[i], A[j]);
		}
	}
	swap(A[i + 1], A[r]);
	return i + 1;
}

void quicksort(int* A, int p, int r) {
	int q; //para almacenar el indice del pivote
	//p: indice menor del arreglo A -> 0
	//r: indice mayor del arreglo A -> n-1
	if (p < r) {
		q = particion(A, p, r); //devuelve el indice del PIVOTE
		quicksort(A, p, q - 1);	//QuickSort de Sublista Izquierda
		quicksort(A, q + 1, r);	//QuickSort de Sublista Derecha
	}
}

#endif // !__QUICKSORT_HPP__
